---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Free Play - Chiltern Computers">
    <main class="cyberpunk-container">
        <!-- Cyberpunk Matrix Background -->
        <div class="matrix-bg"></div>
        <div class="cyberpunk-grid"></div>
        <div class="floating-particles"></div>
        
        <!-- Glitch Header -->
        <div class="cyberpunk-header">
            <h1 class="glitch-title" data-text="NEURAL LINK">NEURAL LINK</h1>
            <div class="cyber-subtitle">
                <span class="typing-text">INITIALIZING NEURAL INTERFACE...</span>
                <span class="cursor">|</span>
            </div>
            <div class="status-bar">
                <div class="status-item">
                    <span class="status-label">CONNECTION:</span>
                    <span class="status-value online">ONLINE</span>
                </div>
                <div class="status-item">
                    <span class="status-label">SECURITY:</span>
                    <span class="status-value secure">ENCRYPTED</span>
                </div>
                <div class="status-item">
                    <span class="status-label">LATENCY:</span>
                    <span class="status-value">12ms</span>
                </div>
            </div>
        </div>

        <!-- Holographic Game Selection -->
        <div class="hologram-grid">
            <div class="hologram-card active" onclick="switchGame('slither')" id="tab-slither">
                <div class="holo-border"></div>
                <div class="holo-content">
                    <div class="holo-icon">
                        <div class="icon-glow">üêç</div>
                    </div>
                    <h3 class="holo-title">SLITHER.EXE</h3>
                    <p class="holo-desc">NEURAL SNAKE PROTOCOL</p>
                    <div class="access-code">[ACCESS GRANTED]</div>
                    <div class="holo-stats">
                        <div class="stat">DIFFICULTY: EXTREME</div>
                        <div class="stat">PLAYERS: MILLIONS</div>
                    </div>
                </div>
                <div class="scan-line"></div>
            </div>
            
            <div class="hologram-card" onclick="switchGame('agar')" id="tab-agar">
                <div class="holo-border"></div>
                <div class="holo-content">
                    <div class="holo-icon">
                        <div class="icon-glow">üî¥</div>
                    </div>
                    <h3 class="holo-title">AGAR.SYS</h3>
                    <p class="holo-desc">CELLULAR WARFARE</p>
                    <div class="access-code">[ACCESS GRANTED]</div>
                    <div class="holo-stats">
                        <div class="stat">DIFFICULTY: HIGH</div>
                        <div class="stat">PLAYERS: ACTIVE</div>
                    </div>
                </div>
                <div class="scan-line"></div>
            </div>
            
            <div class="hologram-card" onclick="switchGame('warbrokers')" id="tab-warbrokers">
                <div class="holo-border"></div>
                <div class="holo-content">
                    <div class="holo-icon">
                        <div class="icon-glow">üî´</div>
                    </div>
                    <h3 class="holo-title">COMBAT.NET</h3>
                    <p class="holo-desc">TACTICAL COMBAT SIM</p>
                    <div class="access-code">[ACCESS GRANTED]</div>
                    <div class="holo-stats">
                        <div class="stat">DIFFICULTY: LETHAL</div>
                        <div class="stat">PLAYERS: SQUAD</div>
                    </div>
                </div>
                <div class="scan-line"></div>
            </div>
        </div>

        <!-- Matrix Separator -->
        <div class="matrix-separator">
            <div class="separator-line"></div>
            <div class="separator-text">INITIALIZING GAME ENVIRONMENT</div>
            <div class="separator-line"></div>
        </div>

        <!-- Cyberpunk Terminal -->
        <div class="cyber-terminal">
            <div class="terminal-header">
                <div class="terminal-controls">
                    <div class="control-dot red"></div>
                    <div class="control-dot yellow"></div>
                    <div class="control-dot green"></div>
                </div>
                <div class="terminal-title">
                    <span id="terminalGameTitle">SLITHER.EXE</span>
                    <div class="signal-strength">
                        <div class="signal-bar"></div>
                        <div class="signal-bar"></div>
                        <div class="signal-bar"></div>
                        <div class="signal-bar"></div>
                        <div class="signal-bar active"></div>
                    </div>
                </div>
                <div class="terminal-actions">
                    <button class="cyber-btn" onclick="toggleFullscreen()">
                        <span id="fullscreenText">JACK IN</span>
                    </button>
                </div>
            </div>
            
            <div class="terminal-screen">
                <div class="screen-static"></div>
                <div id="gameFrame" class="neural-interface">
                    <div class="cyber-loading" id="loadingScreen">
                        <div class="loading-center">
                            <div class="neural-spinner">
                                <div class="spinner-ring"></div>
                                <div class="spinner-ring"></div>
                                <div class="spinner-ring"></div>
                            </div>
                            <div class="loading-text">
                                <div class="loading-line">ESTABLISHING NEURAL LINK...</div>
                                <div class="loading-line">BYPASSING SECURITY PROTOCOLS...</div>
                                <div class="loading-line">INJECTING CODE...</div>
                            </div>
                            <div class="progress-matrix">
                                <div class="progress-fill"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Matrix Separator -->
        <div class="matrix-separator">
            <div class="separator-line"></div>
            <div class="separator-text">DATA STREAM ACTIVE</div>
            <div class="separator-line"></div>
        </div>

        <!-- Data Panels -->
        <div class="data-grid">
            <div class="data-panel left-panel">
                <div class="panel-header">
                    <div class="header-text">SYSTEM.INFO</div>
                    <div class="header-hex">[0x7A4F]</div>
                </div>
                <div class="panel-body" id="gameFeatures">
                    <div class="data-line">‚ñ∂ MULTIPLAYER NETWORK</div>
                    <div class="data-line">‚ñ∂ REAL-TIME SYNC</div>
                    <div class="data-line">‚ñ∂ NEURAL INTERFACE</div>
                    <div class="data-line">‚ñ∂ QUANTUM ENCRYPTION</div>
                    <div class="data-line">‚ñ∂ GLOBAL LEADERBOARD</div>
                </div>
                <div class="panel-footer">
                    <div class="footer-status">STATUS: OPERATIONAL</div>
                </div>
            </div>
            
            <div class="data-panel right-panel">
                <div class="panel-header">
                    <div class="header-text">CONTROL.MAP</div>
                    <div class="header-hex">[0x9B2C]</div>
                </div>
                <div class="panel-body" id="gameControls">
                    <div class="control-line">NEURAL.MOVE ‚Üí MOUSE</div>
                    <div class="control-line">BOOST.SYS ‚Üí CLICK</div>
                    <div class="control-line">COMM.NET ‚Üí ENTER</div>
                    <div class="control-line">PAUSE.EXE ‚Üí ESC</div>
                </div>
                <div class="panel-footer">
                    <div class="footer-status">INPUT: CALIBRATED</div>
                </div>
            </div>
        </div>
        
        <!-- Matrix Separator -->
        <div class="matrix-separator">
            <div class="separator-line"></div>
            <div class="separator-text">NEURAL LINK ESTABLISHED</div>
            <div class="separator-line"></div>
        </div>
        
        <!-- Corporate Footer -->
        <div class="corporate-footer">
            <div class="corp-container">
                <div class="corp-logo">
                    <div class="logo-hex">‚¨°</div>
                    <div class="logo-text">CHILTERN CYBERNETICS</div>
                </div>
                <div class="corp-info">
                    <div class="corp-line">NEURAL INTERFACE DEVELOPMENT DIVISION</div>
                    <div class="corp-line">SPECIALIZED IN CUSTOM DIGITAL EXPERIENCES</div>
                </div>
                <a href="/contact" class="neural-link-btn">
                    ESTABLISH CONNECTION ‚Üí
                </a>
            </div>
        </div>
    </main>
</Layout>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono:wght@400&family=Rajdhani:wght@300;400;500;600;700&display=swap');
    
    * {
        box-sizing: border-box;
    }
    
    .cyberpunk-container {
        min-height: 100vh;
        background: #000;
        color: #00ff41;
        font-family: 'Share Tech Mono', monospace;
        position: relative;
        overflow-x: hidden;
        padding: 8rem 1rem 2rem;
        max-width: none;
    }
    
    /* Matrix Background */
    .matrix-bg {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 20% 30%, rgba(0, 255, 65, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, rgba(0, 255, 255, 0.05) 0%, transparent 50%),
            linear-gradient(0deg, #000 0%, #001100 50%, #000 100%);
        z-index: -3;
        animation: matrixPulse 4s ease-in-out infinite;
    }
    
    @keyframes matrixPulse {
        0%, 100% { opacity: 0.8; }
        50% { opacity: 1; }
    }
    
    .cyberpunk-grid {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            linear-gradient(rgba(0, 255, 65, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 255, 65, 0.1) 1px, transparent 1px);
        background-size: 50px 50px;
        z-index: -2;
        animation: gridMove 20s linear infinite;
    }
    
    @keyframes gridMove {
        0% { transform: translate(0, 0); }
        100% { transform: translate(50px, 50px); }
    }
    
    .floating-particles {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
    }
    
    .floating-particles::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            radial-gradient(2px 2px at 20px 30px, rgba(0, 255, 65, 0.3), transparent),
            radial-gradient(2px 2px at 40px 70px, rgba(0, 255, 255, 0.2), transparent),
            radial-gradient(1px 1px at 90px 40px, rgba(0, 255, 65, 0.4), transparent);
        background-repeat: repeat;
        background-size: 100px 100px;
        animation: particleFloat 15s linear infinite;
    }
    
    @keyframes particleFloat {
        0% { transform: translateY(0); }
        100% { transform: translateY(-100px); }
    }
    
    /* Glitch Header */
    .cyberpunk-header {
        text-align: center;
        margin-bottom: 4rem;
        position: relative;
    }
    
    .glitch-title {
        font-family: 'Rajdhani', sans-serif;
        font-size: clamp(3rem, 8vw, 6rem);
        font-weight: 700;
        color: #00ff41;
        text-shadow: 
            0 0 5px #00ff41,
            0 0 10px #00ff41,
            0 0 15px #00ff41,
            0 0 20px #00ff41;
        margin-bottom: 1rem;
        position: relative;
        animation: glitchAnimation 3s infinite;
        letter-spacing: 0.1em;
    }
    
    .glitch-title::before,
    .glitch-title::after {
        content: attr(data-text);
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .glitch-title::before {
        animation: glitch1 2s infinite;
        color: #ff0080;
        z-index: -1;
    }
    
    .glitch-title::after {
        animation: glitch2 2s infinite;
        color: #00ffff;
        z-index: -2;
    }
    
    @keyframes glitchAnimation {
        0%, 100% { transform: translate(0); }
        20% { transform: translate(-2px, 2px); }
        40% { transform: translate(-2px, -2px); }
        60% { transform: translate(2px, 2px); }
        80% { transform: translate(2px, -2px); }
    }
    
    @keyframes glitch1 {
        0%, 100% { transform: translate(0); }
        10% { transform: translate(-2px, -2px); }
        20% { transform: translate(2px, 2px); }
        30% { transform: translate(-2px, 2px); }
        40% { transform: translate(2px, -2px); }
    }
    
    @keyframes glitch2 {
        0%, 100% { transform: translate(0); }
        10% { transform: translate(2px, 2px); }
        20% { transform: translate(-2px, -2px); }
        30% { transform: translate(2px, -2px); }
        40% { transform: translate(-2px, 2px); }
    }
    
    .cyber-subtitle {
        font-size: 1.2rem;
        color: #00ffff;
        text-shadow: 0 0 10px #00ffff;
        margin-bottom: 2rem;
        font-family: 'Share Tech Mono', monospace;
    }
    
    .typing-text {
        animation: typing 3s steps(30) infinite;
    }
    
    .cursor {
        animation: blink 1s infinite;
        color: #00ff41;
    }
    
    @keyframes typing {
        0%, 50% { width: 0; }
        100% { width: 100%; }
    }
    
    @keyframes blink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0; }
    }
    
    .status-bar {
        display: flex;
        justify-content: center;
        gap: 2rem;
        flex-wrap: wrap;
        margin-top: 1rem;
    }
    
    .status-item {
        background: rgba(0, 255, 65, 0.1);
        border: 1px solid #00ff41;
        padding: 0.5rem 1rem;
        border-radius: 0;
        font-size: 0.9rem;
        clip-path: polygon(10px 0%, 100% 0%, calc(100% - 10px) 100%, 0% 100%);
    }
    
    .status-label {
        color: #999;
    }
    
    .status-value {
        color: #00ff41;
        margin-left: 0.5rem;
    }
    
    .status-value.online {
        color: #00ff41;
        text-shadow: 0 0 5px #00ff41;
    }
    
    .status-value.secure {
        color: #00ffff;
        text-shadow: 0 0 5px #00ffff;
    }
    
    /* Holographic Cards */
    .hologram-grid {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-bottom: 4rem;
        flex-wrap: wrap;
        padding: 0 1rem;
    }
    
    .hologram-card {
        width: 280px;
        height: 350px;
        background: linear-gradient(145deg, rgba(0, 20, 0, 0.8), rgba(0, 40, 20, 0.6));
        border: 2px solid #00ff41;
        position: relative;
        cursor: pointer;
        transition: all 0.4s ease;
        clip-path: polygon(0 0, calc(100% - 20px) 0, 100% 20px, 100% 100%, 20px 100%, 0 calc(100% - 20px));
        overflow: hidden;
    }
    
    .hologram-card::before {
        content: '';
        position: absolute;
        top: -2px;
        left: -2px;
        right: -2px;
        bottom: -2px;
        background: linear-gradient(45deg, #00ff41, #00ffff, #00ff41);
        z-index: -1;
        border-radius: inherit;
        opacity: 0;
        transition: opacity 0.3s;
    }
    
    .hologram-card:hover::before,
    .hologram-card.active::before {
        opacity: 1;
        animation: borderGlow 2s infinite;
    }
    
    @keyframes borderGlow {
        0%, 100% { opacity: 0.5; }
        50% { opacity: 1; }
    }
    
    .hologram-card:hover {
        transform: translateY(-10px) scale(1.05);
        box-shadow: 
            0 20px 40px rgba(0, 255, 65, 0.3),
            inset 0 0 30px rgba(0, 255, 65, 0.1);
    }
    
    .hologram-card.active {
        border-color: #00ffff;
        box-shadow: 
            0 0 30px rgba(0, 255, 255, 0.5),
            inset 0 0 30px rgba(0, 255, 255, 0.1);
    }
    
    .holo-border {
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
        border: 1px solid rgba(0, 255, 65, 0.3);
        clip-path: polygon(0 0, calc(100% - 15px) 0, 100% 15px, 100% 100%, 15px 100%, 0 calc(100% - 15px));
    }
    
    .holo-content {
        padding: 2rem 1.5rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        text-align: center;
        position: relative;
        z-index: 2;
    }
    
    .holo-icon {
        margin-bottom: 1rem;
        position: relative;
    }
    
    .icon-glow {
        font-size: 3rem;
        filter: drop-shadow(0 0 15px #00ff41);
        animation: iconPulse 2s ease-in-out infinite;
    }
    
    @keyframes iconPulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
    }
    
    .holo-title {
        font-family: 'Rajdhani', sans-serif;
        font-size: 1.4rem;
        font-weight: 600;
        color: #00ff41;
        text-shadow: 0 0 10px #00ff41;
        margin-bottom: 0.5rem;
        letter-spacing: 0.1em;
    }
    
    .holo-desc {
        font-size: 0.9rem;
        color: #00ffff;
        text-shadow: 0 0 5px #00ffff;
        margin-bottom: 1rem;
        letter-spacing: 0.05em;
    }
    
    .access-code {
        font-size: 0.8rem;
        color: #00ff41;
        background: rgba(0, 255, 65, 0.1);
        padding: 0.3rem 0.8rem;
        border: 1px solid #00ff41;
        margin-bottom: 1rem;
        animation: accessBlink 2s infinite;
    }
    
    @keyframes accessBlink {
        0%, 80% { opacity: 1; }
        81%, 100% { opacity: 0.3; }
    }
    
    .holo-stats {
        font-size: 0.7rem;
        color: #999;
    }
    
    .stat {
        margin-bottom: 0.3rem;
    }
    
    .scan-line {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(90deg, transparent, #00ff41, transparent);
        animation: scanLineMove 3s linear infinite;
    }
    
    @keyframes scanLineMove {
        0% { transform: translateY(0); opacity: 1; }
        100% { transform: translateY(350px); opacity: 0; }
    }
    
    /* Cyberpunk Terminal */
    .cyber-terminal {
        background: linear-gradient(145deg, rgba(0, 20, 0, 0.9), rgba(0, 10, 5, 0.8));
        border: 2px solid #00ff41;
        border-radius: 0;
        overflow: hidden;
        margin-bottom: 3rem;
        position: relative;
        clip-path: polygon(20px 0, 100% 0, 100% calc(100% - 20px), calc(100% - 20px) 100%, 0 100%, 0 20px);
        box-shadow: 
            0 0 50px rgba(0, 255, 65, 0.2),
            inset 0 0 50px rgba(0, 255, 65, 0.05);
    }
    
    .terminal-header {
        background: linear-gradient(90deg, rgba(0, 255, 65, 0.2), rgba(0, 255, 255, 0.1));
        padding: 1rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #00ff41;
    }
    
    .terminal-controls {
        display: flex;
        gap: 0.5rem;
    }
    
    .control-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 1px solid #333;
    }
    
    .control-dot.red { background: #ff0040; box-shadow: 0 0 10px #ff0040; }
    .control-dot.yellow { background: #ffff00; box-shadow: 0 0 10px #ffff00; }
    .control-dot.green { background: #00ff41; box-shadow: 0 0 10px #00ff41; }
    
    .terminal-title {
        font-family: 'Rajdhani', sans-serif;
        font-size: 1.3rem;
        font-weight: 600;
        color: #00ff41;
        text-shadow: 0 0 10px #00ff41;
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .signal-strength {
        display: flex;
        gap: 2px;
        align-items: end;
    }
    
    .signal-bar {
        width: 3px;
        background: #333;
        border-radius: 1px;
    }
    
    .signal-bar:nth-child(1) { height: 6px; }
    .signal-bar:nth-child(2) { height: 9px; }
    .signal-bar:nth-child(3) { height: 12px; }
    .signal-bar:nth-child(4) { height: 15px; }
    .signal-bar:nth-child(5) { height: 18px; }
    
    .signal-bar.active {
        background: #00ff41;
        box-shadow: 0 0 5px #00ff41;
        animation: signalPulse 2s infinite;
    }
    
    @keyframes signalPulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }
    
    .cyber-btn {
        background: linear-gradient(45deg, rgba(0, 255, 65, 0.2), rgba(0, 255, 255, 0.1));
        border: 1px solid #00ff41;
        color: #00ff41;
        padding: 0.7rem 1.5rem;
        font-family: 'Share Tech Mono', monospace;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s;
        clip-path: polygon(10px 0%, 100% 0%, calc(100% - 10px) 100%, 0% 100%);
        text-shadow: 0 0 5px #00ff41;
    }
    
    .cyber-btn:hover {
        background: linear-gradient(45deg, rgba(0, 255, 65, 0.4), rgba(0, 255, 255, 0.2));
        box-shadow: 0 0 20px rgba(0, 255, 65, 0.5);
        transform: translateY(-2px);
    }
    
    .terminal-screen {
        position: relative;
        height: 500px;
        background: #000;
        overflow: hidden;
    }
    
    .screen-static {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            repeating-linear-gradient(
                0deg,
                transparent,
                transparent 2px,
                rgba(0, 255, 65, 0.03) 2px,
                rgba(0, 255, 65, 0.03) 4px
            );
        pointer-events: none;
        z-index: 10;
        animation: staticMove 0.1s linear infinite;
    }
    
    @keyframes staticMove {
        0% { transform: translateY(0); }
        100% { transform: translateY(4px); }
    }
    
    .neural-interface {
        width: 100%;
        height: 100%;
        position: relative;
    }
    
    .game-iframe {
        width: 100%;
        height: 100%;
        border: none;
        background: #000;
    }
    
    .cyber-loading {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        background: linear-gradient(45deg, #000, #001100);
        position: relative;
    }
    
    .loading-center {
        text-align: center;
        position: relative;
        z-index: 2;
    }
    
    .neural-spinner {
        position: relative;
        width: 120px;
        height: 120px;
        margin: 0 auto 2rem;
    }
    
    .spinner-ring {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 2px solid transparent;
        border-radius: 50%;
        animation: neuralSpin 2s linear infinite;
    }
    
    .spinner-ring:nth-child(1) {
        border-top-color: #00ff41;
        animation-duration: 2s;
    }
    
    .spinner-ring:nth-child(2) {
        border-right-color: #00ffff;
        animation-duration: 3s;
        animation-direction: reverse;
    }
    
    .spinner-ring:nth-child(3) {
        border-bottom-color: #ff0080;
        animation-duration: 4s;
    }
    
    @keyframes neuralSpin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .loading-text {
        margin-bottom: 2rem;
    }
    
    .loading-line {
        color: #00ff41;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        animation: textGlow 2s ease-in-out infinite;
    }
    
    .loading-line:nth-child(2) { animation-delay: 0.5s; }
    .loading-line:nth-child(3) { animation-delay: 1s; }
    
    @keyframes textGlow {
        0%, 100% { 
            text-shadow: 0 0 5px #00ff41;
            opacity: 0.8;
        }
        50% { 
            text-shadow: 0 0 15px #00ff41, 0 0 25px #00ff41;
            opacity: 1;
        }
    }
    
    .progress-matrix {
        width: 300px;
        height: 4px;
        background: rgba(0, 255, 65, 0.2);
        border: 1px solid #00ff41;
        overflow: hidden;
        margin: 0 auto;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #00ff41, #00ffff, #00ff41);
        width: 0%;
        animation: progressLoad 3s ease-in-out infinite;
    }
    
    @keyframes progressLoad {
        0% { width: 0%; }
        70% { width: 100%; }
        100% { width: 0%; }
    }
    
    /* Data Panels */
    .data-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 3rem;
        padding: 0 1rem;
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .data-panel {
        background: linear-gradient(145deg, rgba(0, 20, 0, 0.8), rgba(0, 10, 5, 0.6));
        border: 1px solid #00ff41;
        clip-path: polygon(0 0, calc(100% - 15px) 0, 100% 15px, 100% 100%, 15px 100%, 0 calc(100% - 15px));
        overflow: hidden;
        position: relative;
    }
    
    .data-panel::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 255, 65, 0.1), transparent);
        animation: dataSweep 4s infinite;
    }
    
    @keyframes dataSweep {
        0% { left: -100%; }
        100% { left: 100%; }
    }
    
    .panel-header {
        background: linear-gradient(90deg, rgba(0, 255, 65, 0.3), rgba(0, 255, 255, 0.2));
        padding: 1rem 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #00ff41;
        position: relative;
        z-index: 2;
    }
    
    .header-text {
        font-family: 'Rajdhani', sans-serif;
        font-weight: 600;
        color: #00ff41;
        text-shadow: 0 0 10px #00ff41;
        font-size: 1.1rem;
    }
    
    .header-hex {
        font-size: 0.8rem;
        color: #00ffff;
        opacity: 0.7;
    }
    
    .panel-body {
        padding: 1.5rem;
        position: relative;
        z-index: 2;
    }
    
    .data-line, .control-line {
        color: #00ff41;
        margin-bottom: 0.8rem;
        font-size: 0.9rem;
        position: relative;
        padding-left: 1rem;
        animation: dataFlicker 3s infinite;
    }
    
    .data-line:nth-child(even), .control-line:nth-child(even) {
        animation-delay: 0.5s;
    }
    
    @keyframes dataFlicker {
        0%, 95% { opacity: 1; }
        96%, 100% { opacity: 0.7; }
    }
    
    .data-line::before, .control-line::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        width: 4px;
        height: 4px;
        background: #00ff41;
        box-shadow: 0 0 5px #00ff41;
        transform: translateY(-50%);
        animation: dotPulse 2s infinite;
    }
    
    @keyframes dotPulse {
        0%, 100% { opacity: 1; transform: translateY(-50%) scale(1); }
        50% { opacity: 0.5; transform: translateY(-50%) scale(1.2); }
    }
    
    .panel-footer {
        padding: 0.8rem 1.5rem;
        border-top: 1px solid rgba(0, 255, 65, 0.3);
        background: rgba(0, 255, 65, 0.05);
        position: relative;
        z-index: 2;
    }
    
    .footer-status {
        font-size: 0.8rem;
        color: #00ffff;
        text-shadow: 0 0 5px #00ffff;
    }
    
    /* Corporate Footer */
    .corporate-footer {
        margin-top: 4rem;
        border-top: 1px solid #00ff41;
        padding-top: 2rem;
    }
    
    .corp-container {
        max-width: 1000px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 2rem;
    }
    
    .corp-logo {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .logo-hex {
        font-size: 2rem;
        color: #00ff41;
        text-shadow: 0 0 15px #00ff41;
        animation: hexRotate 4s linear infinite;
    }
    
    @keyframes hexRotate {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .logo-text {
        font-family: 'Rajdhani', sans-serif;
        font-size: 1.5rem;
        font-weight: 600;
        color: #00ff41;
        text-shadow: 0 0 10px #00ff41;
        letter-spacing: 0.1em;
    }
    
    .corp-info {
        text-align: center;
        flex: 1;
    }
    
    .corp-line {
        color: #00ffff;
        font-size: 0.9rem;
        margin-bottom: 0.3rem;
        text-shadow: 0 0 5px #00ffff;
    }
    
    .neural-link-btn {
        background: linear-gradient(45deg, rgba(0, 255, 65, 0.2), rgba(0, 255, 255, 0.1));
        border: 2px solid #00ff41;
        color: #00ff41;
        padding: 1rem 2rem;
        text-decoration: none;
        font-family: 'Share Tech Mono', monospace;
        font-weight: 400;
        transition: all 0.3s;
        clip-path: polygon(15px 0%, 100% 0%, calc(100% - 15px) 100%, 0% 100%);
        text-shadow: 0 0 10px #00ff41;
        position: relative;
        overflow: hidden;
    }
    
    .neural-link-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 255, 65, 0.3), transparent);
        transition: left 0.5s;
    }
    
    .neural-link-btn:hover::before {
        left: 100%;
    }
    
    .neural-link-btn:hover {
        background: linear-gradient(45deg, rgba(0, 255, 65, 0.4), rgba(0, 255, 255, 0.2));
        box-shadow: 
            0 0 30px rgba(0, 255, 65, 0.5),
            inset 0 0 20px rgba(0, 255, 65, 0.1);
        transform: translateY(-3px);
        border-color: #00ffff;
        color: #00ffff;
        text-shadow: 0 0 15px #00ffff;
    }
    
    /* Matrix Separators */
    .matrix-separator {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 4rem 0;
        padding: 2rem 1rem;
        position: relative;
        overflow: hidden;
    }
    
    .matrix-separator::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            repeating-linear-gradient(
                45deg,
                transparent,
                transparent 2px,
                rgba(0, 255, 65, 0.1) 2px,
                rgba(0, 255, 65, 0.1) 4px
            );
        animation: separatorMove 3s linear infinite;
        z-index: -1;
    }
    
    @keyframes separatorMove {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }
    
    .separator-line {
        flex: 1;
        height: 2px;
        background: linear-gradient(90deg, transparent, #00ff41, transparent);
        position: relative;
    }
    
    .separator-line::before {
        content: '';
        position: absolute;
        top: -1px;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, transparent, rgba(0, 255, 65, 0.3), transparent);
        animation: linePulse 2s ease-in-out infinite;
    }
    
    @keyframes linePulse {
        0%, 100% { opacity: 0.5; transform: scaleX(1); }
        50% { opacity: 1; transform: scaleX(1.1); }
    }
    
    .separator-text {
        margin: 0 2rem;
        color: #00ff41;
        font-family: 'Share Tech Mono', monospace;
        font-size: 0.9rem;
        text-shadow: 0 0 10px #00ff41;
        letter-spacing: 2px;
        background: rgba(0, 0, 0, 0.8);
        padding: 0.5rem 1rem;
        border: 1px solid #00ff41;
        clip-path: polygon(10px 0%, 100% 0%, calc(100% - 10px) 100%, 0% 100%);
        position: relative;
        animation: textFlicker 3s infinite;
    }
    
    .separator-text::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 255, 65, 0.3), transparent);
        animation: textSweep 4s infinite;
    }
    
    @keyframes textFlicker {
        0%, 95% { opacity: 1; }
        96%, 100% { opacity: 0.7; }
    }
    
    @keyframes textSweep {
        0% { left: -100%; }
        100% { left: 100%; }
    }
    @media (max-width: 768px) {
        .cyberpunk-container {
            padding: 6rem 0.5rem 1rem;
        }
        
        .glitch-title {
            font-size: 3rem;
        }
        
        .hologram-grid {
            flex-direction: column;
            align-items: center;
            padding: 0 0.5rem;
        }
        
        .hologram-card {
            width: 300px;
        }
        
        .terminal-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .data-grid {
            grid-template-columns: 1fr;
            padding: 0 0.5rem;
        }
        
        .corp-container {
            flex-direction: column;
            text-align: center;
        }
        
        .status-bar {
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .cyber-terminal {
            margin: 0 0.5rem 3rem;
        }
        
        .corporate-footer {
            padding: 2rem 0.5rem;
        }
    }
</style>

<script>
    const games = {
        slither: {
            title: "SLITHER.EXE",
            description: "Neural snake warfare protocol initiated",
            url: "https://slither.io/",
            features: [
                "‚ñ∂ NEURAL NETWORK MULTIPLAYER",
                "‚ñ∂ QUANTUM SNAKE MECHANICS", 
                "‚ñ∂ REAL-TIME SYNC PROTOCOL",
                "‚ñ∂ GLOBAL LEADERBOARD MATRIX",
                "‚ñ∂ CYBERNETIC ENHANCEMENT"
            ],
            controls: {
                "NEURAL.MOVE": "MOUSE",
                "BOOST.SYS": "CLICK",
                "COMM.NET": "ENTER",
                "PAUSE.EXE": "ESC"
            }
        },
        agar: {
            title: "AGAR.SYS",
            description: "Cellular warfare system online",
            url: "https://agar.io/",
            features: [
                "‚ñ∂ CELLULAR COMBAT MATRIX",
                "‚ñ∂ SPLIT/MERGE ALGORITHMS",
                "‚ñ∂ TEAM BATTLE PROTOCOLS", 
                "‚ñ∂ SKIN CUSTOMIZATION ENGINE",
                "‚ñ∂ TACTICAL WARFARE SYSTEM"
            ],
            controls: {
                "CELL.MOVE": "MOUSE",
                "SPLIT.EXE": "SPACE",
                "EJECT.SYS": "W",
                "TEAM.COMM": "ENTER"
            }
        },
        warbrokers: {
            title: "COMBAT.NET",
            description: "Tactical combat simulation active",
            url: "https://www.crazygames.com/game/war-brokers-io",
            features: [
                "‚ñ∂ COMBAT SIMULATION ENGINE",
                "‚ñ∂ VEHICLE WARFARE SYSTEM",
                "‚ñ∂ TACTICAL BATTLE MATRIX", 
                "‚ñ∂ MULTI-MODE PROTOCOLS",
                "‚ñ∂ WEAPON MASTERY TREE"
            ],
            controls: {
                "MOVE.SYS": "WASD",
                "TARGET.NET": "MOUSE",
                "RELOAD.EXE": "R",
                "VEHICLE.LINK": "F"
            }
        }
    };

    let currentGame = 'slither';
    let isFullscreen = false;

    function switchGame(gameKey) {
        // Update active hologram
        document.querySelectorAll('.hologram-card').forEach(card => card.classList.remove('active'));
        document.getElementById(`tab-${gameKey}`).classList.add('active');
        
        currentGame = gameKey;
        const game = games[gameKey];
        
        // Update terminal title with glitch effect
        const titleElement = document.getElementById('terminalGameTitle');
        titleElement.style.animation = 'glitchAnimation 0.5s';
        setTimeout(() => {
            titleElement.textContent = game.title;
            titleElement.style.animation = '';
        }, 250);
        
        // Update features with cyber animation
        const featuresHtml = game.features.map(feature => `<div class="data-line">${feature}</div>`).join('');
        document.getElementById('gameFeatures').innerHTML = featuresHtml;
        
        // Update controls with cyber format
        const controlsHtml = Object.entries(game.controls).map(([key, action]) => 
            `<div class="control-line">${key} ‚Üí ${action}</div>`
        ).join('');
        document.getElementById('gameControls').innerHTML = controlsHtml;
        
        // Load game with neural interface
        loadGame(game.url);
        
        // Play cyber sound effect
        playCyberSound();
    }

    function loadGame(url) {
        const gameFrame = document.getElementById('gameFrame');
        
        // Show cyber loading interface
        gameFrame.innerHTML = `
            <div class="cyber-loading">
                <div class="loading-center">
                    <div class="neural-spinner">
                        <div class="spinner-ring"></div>
                        <div class="spinner-ring"></div>
                        <div class="spinner-ring"></div>
                    </div>
                    <div class="loading-text">
                        <div class="loading-line">ESTABLISHING NEURAL LINK...</div>
                        <div class="loading-line">BYPASSING SECURITY PROTOCOLS...</div>
                        <div class="loading-line">INJECTING CODE...</div>
                    </div>
                    <div class="progress-matrix">
                        <div class="progress-fill"></div>
                    </div>
                </div>
            </div>
        `;
        
        // Create iframe after cyber delay
        setTimeout(() => {
            const iframe = document.createElement('iframe');
            iframe.src = url;
            iframe.className = 'game-iframe';
            iframe.allowFullscreen = true;
            iframe.loading = 'lazy';
            
            iframe.onerror = () => {
                gameFrame.innerHTML = `
                    <div class="cyber-loading">
                        <div class="loading-center">
                            <div style="color: #ff0040; font-size: 2rem; margin-bottom: 1rem; text-shadow: 0 0 15px #ff0040;">‚ö† SYSTEM ERROR</div>
                            <div class="loading-line" style="color: #ff0040;">NEURAL LINK COMPROMISED</div>
                            <div class="loading-line" style="color: #ff0040;">CONNECTION TERMINATED</div>
                            <button onclick="switchGame('${currentGame}')" class="cyber-btn" style="margin-top: 2rem; border-color: #ff0040; color: #ff0040;">RETRY CONNECTION</button>
                        </div>
                    </div>
                `;
            };
            
            gameFrame.innerHTML = '';
            gameFrame.appendChild(iframe);
        }, 3000);
    }

    function toggleFullscreen() {
        const terminal = document.querySelector('.cyber-terminal');
        const fullscreenText = document.getElementById('fullscreenText');
        
        if (!isFullscreen) {
            if (terminal.requestFullscreen) {
                terminal.requestFullscreen();
            } else if (terminal.webkitRequestFullscreen) {
                terminal.webkitRequestFullscreen();
            } else if (terminal.msRequestFullscreen) {
                terminal.msRequestFullscreen();
            }
            fullscreenText.textContent = 'DISCONNECT';
            isFullscreen = true;
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
            fullscreenText.textContent = 'JACK IN';
            isFullscreen = false;
        }
        
        playCyberSound();
    }

    // Handle fullscreen change events
    document.addEventListener('fullscreenchange', () => {
        isFullscreen = !!document.fullscreenElement;
        document.getElementById('fullscreenText').textContent = 
            isFullscreen ? 'DISCONNECT' : 'JACK IN';
    });

    // Cyber sound effects
    function playCyberSound() {
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
            oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.2);
        } catch (error) {
            // Ignore audio errors
        }
    }

    // Initialize neural interface
    document.addEventListener('DOMContentLoaded', () => {
        switchGame('slither');
        
        // Add cyber startup effect
        setTimeout(() => {
            document.body.classList.add('neural-online');
        }, 1000);
        
        // Random glitch effects
        setInterval(() => {
            if (Math.random() < 0.1) {
                document.querySelector('.glitch-title').style.animation = 'glitchAnimation 0.5s';
                setTimeout(() => {
                    document.querySelector('.glitch-title').style.animation = 'glitchAnimation 3s infinite';
                }, 500);
            }
        }, 5000);
    });

    // Matrix falling characters effect
    function createMatrixRain() {
        const chars = '01„Ç¢„Ç§„Ç¶„Ç®„Ç™„Ç´„Ç≠„ÇØ„Ç±„Ç≥„Çµ„Ç∑„Çπ„Çª„ÇΩ„Çø„ÉÅ„ÉÑ„ÉÜ„Éà„Éä„Éã„Éå„Éç„Éé„Éè„Éí„Éï„Éò„Éõ„Éû„Éü„É†„É°„É¢„É§„É¶„É®„É©„É™„É´„É¨„É≠„ÉØ„É≤„É≥';
        const matrixContainer = document.createElement('div');
        matrixContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            overflow: hidden;
        `;
        
        for (let i = 0; i < 50; i++) {
            setTimeout(() => {
                const drop = document.createElement('div');
                drop.textContent = chars[Math.floor(Math.random() * chars.length)];
                drop.style.cssText = `
                    position: absolute;
                    color: #00ff41;
                    font-family: 'Share Tech Mono', monospace;
                    font-size: ${Math.random() * 10 + 10}px;
                    left: ${Math.random() * 100}%;
                    animation: matrixFall ${Math.random() * 3 + 2}s linear infinite;
                    opacity: ${Math.random() * 0.5 + 0.2};
                `;
                
                matrixContainer.appendChild(drop);
                
                setTimeout(() => {
                    drop.remove();
                }, 5000);
            }, i * 100);
        }
        
        document.body.appendChild(matrixContainer);
        
        // Add CSS for matrix fall
        if (!document.getElementById('matrix-fall-css')) {
            const style = document.createElement('style');
            style.id = 'matrix-fall-css';
            style.textContent = `
                @keyframes matrixFall {
                    0% { transform: translateY(-100vh); }
                    100% { transform: translateY(100vh); }
                }
            `;
            document.head.appendChild(style);
        }
    }
    
    // Start matrix effect
    setInterval(createMatrixRain, 3000);
</script>